# -------------------------------------------------------
# ๐ผ ูุดุฑูุน ุชุญููู ุจูุงูุงุช Titanic + ุงุณุชุฎุฏุงูุงุช GroupBy ูู Pandas ๐ผ
#
# ุงููุฏู ูู ุงููุดุฑูุน:
# - ุงุณุชุฎุฏุงู ุจูุงูุงุช Titanic ุงูุฌุงูุฒุฉ ูู ููุชุจุฉ seaborn.
# - ุชุทุจูู ุชุญููู ุฅุญุตุงุฆู ุจุงุณุชุฎุฏุงู pivot_table.
# - ุงุณุชุนุฑุงุถ ูุดุฑุญ ุงุณุชุฎุฏุงู groupby ูุน applyุ aggregateุ filterุ ู transform.
# - ุชูููุฐ ุจุนุถ ุงูุญุณุงุจุงุช ุงูุฅุญุตุงุฆูุฉ ููุนุงูุฌุฉ ุงูุจูุงูุงุช ุจุทุฑููุฉ ุงุญุชุฑุงููุฉ.
# -------------------------------------------------------

import numpy as np
import pandas as pd
import seaborn as sns

# -------------------------------------------------------
# ๐ณ๏ธ ุชุญููู ูุนุฑุถ ุฃูู 5 ุตููู ูู ุจูุงูุงุช Titanic
# -------------------------------------------------------
titanic = sns.load_dataset("titanic")
print(titanic.head())

# -------------------------------------------------------
# ๐ ุฅูุดุงุก Pivot Table ููุชูุณุท ุงูุฃุนูุงุฑ ููุชูุณุท ุงูุฃุฌุฑุฉ (fare)
# ุญุณุจ ุงูุฌูุณ ูุงูุดุฎุต (who) ูููุงุฑูุฉ ุงูุทุจูุงุช (class) ูุงูุจูุงุก ุนูู ููุฏ ุงูุญูุงุฉ (alive)
# -------------------------------------------------------
pivot = titanic.pivot_table(
    index=["sex", "who"],                 # ุงูุตููู: ุงูุฌูุณ ููู ูู ุงูุดุฎุต (ุทููุ ุฑุฌูุ ุงูุฑุฃุฉ)
    values=["age", "fare"],               # ุงูููู ุงูุชู ูุฑูุฏ ุญุณุงุจูุง
    aggfunc={"age": "mean", "fare": "median"},  # ููุน ุงูุฅุฌุฑุงุก ุงูุฅุญุตุงุฆู
    columns=["class", "alive"],           # ุงูุฃุนูุฏุฉ: ุงูุทุจูุฉ ูุงูุจูุงุก ุนูู ููุฏ ุงูุญูุงุฉ
    margins=True                          # ูุนุฑุถ ุงูุฅุฌูุงููุงุช ูู ุงูููุงูุฉ
)
print(pivot)

# -------------------------------------------------------
# ๐ ุฅูุดุงุก DataFrame ุจุณูุท ูุชุฌุฑุจุฉ GroupBy
# -------------------------------------------------------
df = pd.DataFrame({
    "key": ["A", "B", "D", "A", "B", "D"],
    "data1": [1, 2, 3, 4, 5, 12],
    "data2": [6, 7, 8, 9, 10, 15]
})

# -------------------------------------------------------
# ๐ apply_func: ูุญุณุงุจ normalized_data1 ุฏุงุฎู ูู ูุฌููุนุฉ
# -------------------------------------------------------
def apply_func(dataframe):
    dataframe = dataframe.copy()  # ูุญูุงูุฉ ุงูุฏุงุชุง ุงูุฃุตููุฉ ูู ุงูุชุนุฏูู ุงููุจุงุดุฑ
    dataframe["normalized_data1"] = dataframe["data1"] / dataframe["data1"].mean()
    return dataframe

# ุชุทุจูู apply_func ุจุงุณุชุฎุฏุงู groupby
print(df.groupby("key").apply(apply_func).reset_index(drop=True))

# -------------------------------------------------------
# ๐ aggregate: ุญุณุงุจ ุงููุชูุณุท (mean) ููู ุนููุฏ ุจุงุณุชุฎุฏุงู ุทุฑููุชูู
# -------------------------------------------------------
# ุงูุทุฑููุฉ 1: aggregate ุจุฏูู ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ
print(df.groupby("key").aggregate([np.mean]))

# ุงูุทุฑููุฉ 2: aggregate ูุน ุชุญุฏูุฏ ุฏูุงู ูุฎุชููุฉ ููู ุนููุฏ
print(df.groupby("key").aggregate({
    "data1": np.mean,
    "data2": np.max
}))

# -------------------------------------------------------
# ๐ซ filter_func: ููุชุฑุฉ ุงููุฌููุนุงุช ุงูุชู ูุชูุณุท data1 ูููุง ุฃูู ูู 5
# -------------------------------------------------------
def filter_func(dataframe):
    return dataframe["data1"].mean() < 5

# ุชุทุจูู filter
print(df.groupby("key").filter(filter_func))

# -------------------------------------------------------
# ๐ transform_func: ุชุทุจูุน ุงูุจูุงูุงุช ุฏุงุฎู ูู ูุฌููุนุฉ ุจุทุฑุญ ุงููุชูุณุท
# -------------------------------------------------------
def transform_func(dataframe):
    return dataframe - dataframe.mean()

# ุชุทุจูู transform ุฏุงุฎู ูู ูุฌููุนุฉ
print(df.groupby("key").transform(transform_func))
